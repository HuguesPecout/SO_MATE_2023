---
title: "Visualisation de données avec R"
subtitle: "Tour d'horizon des fonctionnalités de représentation graphique"
img: images/entete.png
# date: 
author: Hugues Pecout (CNRS, UMR Géographie-Cités)
institute: "Journée annuelle SO-MATE 2023, Limoges"
affiliation: <img src="images/cnrs.png" width="60" style="margin-right:320px;"/><img src="images/somate.png" width="260" style="margin-right:320px;"/><img src="images/geocite.jpeg" width="60" />
lang: fr
editor: source
format:
  revealjs: 
    template-partials:
      - title-slide.html
    theme: [dark, styles.scss]
    logo: images/logo_mate_shs_0.png
    footer: "Journée annuelle SO-MATE 2023 - Représentations graphiques avec R"
    scrollable: TRUE
    smaller: TRUE
    overview: TRUE
    chalkboard: FALSE
    transition: fade
    transition-speed: fast
    code-link: TRUE
    menu: TRUE
    css: style.css
    bibliography: references.bib
    pointer:
      pointerSize: 20
      color: 'red4'
revealjs-plugins:
  - pointer
---

# [Outils de représentation de données]{.bigtwo}

## [Graphiques avec Excel]{.bigone}

::: columns
::: {.column width="25%"}

::: {style="font-size:145%;"} 
✅ **Rapide**   
✅ **Facile**    

\

::: {.txt2}

**Fonctionnalités disponibles :**

❌ Graphiques par défault    
❌ Types de graphiques    
❌ Interactivité        

\

**Gestion des données :**

❌ Manipulation des données         
❌ Statistiques             
❌ Données volumineuses      

\

**Reproductibilité :**

❌ Automatisation du pipeline   
❌ Collaboration         
❌ Versioning
:::
:::
:::

::: {.column width="75%"}
::: {style="margin-top:30px;margin-bottom:15px;font-size:160%;"}
**Mais la représentation graphiques avec Excel connaît des limites...**
:::

![](images/excel.png)

::: {.center style="font-size:80%;"}
[https://excelcharts.com/](https://excelcharts.com/)
:::
:::
:::

## [Graphiques avec des outils dédiés]{.bigone}

[Des **fonctionnalités avancées** et des **sorties graphiques très élégantes**, mais des **logiciels payants**.]{style="font-size:130%;margin-top:10px"}

::: {style="margin-top:-10px;"}
[Bon outils si on ne pratique pas R régulièrement, mais **limité notamment en matière de reproductibilité**.]{style="font-size:130%;"}
:::

::: columns
::: {.column width="20%"}
![](images/power-bi_logo.png){width=80% style="margin-top:10px;"} 
![](images/Tableau-Logo.png){width=80% style="margin-top:-15px;"}    
![](images/ClickView-logo-1.png){width=80% style="margin-top:-15px;"} 
![](images/flourish.jpg){width=80% style="margin-top:20px;"}    
![](images/datawrapper.png){width=80% style="margin-top:20px;"}
![](images/Adobe_Illustrator.png){width=45% style="margin-top:20px;"}  
:::

::: {.column width="5%"}

:::

::: {.column width="75%"}

![](images/power-bi.png){width=90%}

:::

:::


# [Graphiques avec R-base]{.bigtwo}

## [Fonctions graphiques R-base (1995)]{.bigone}

[La version 1.0 de R a été publiée en 2000, mais ce langage est distribué en tant que logiciel Open Source et avec des fonctions graphiques depuis 1995. **Au centre de l'ecosystème graphique du R-base : la fonction** [**`plot()`**](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/plot)]{.bigbis}

::: {.codeXXL style="margin-top:30px;"}
```{r}
#| echo: true
#| out.width: 85%
plot(x = 1, y = 1)
```
:::

## [plot()]{.bigone}

[**Une fonction générique très pratique pour l'exploration, qui s'adapte aux différents types des données.**]{.bigtwo}

::: columns
::: {.column width="50%"}

[1 variable quantitative]{.orange .codeL} - [Nuage de points ordonnés]{.codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
plot(cars$speed)
```
:::

[2 variables quantitatives]{.orange .codeL} - [Nuage de points]{.codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
plot(speed ~ dist, data = cars)
```
:::


[1 variable quanti vs 1 variable quali]{.orange .codeL}  - [Boîte à moustache]{.codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
plot(ncases ~ agegp, data = esoph)
```
:::

:::


::: {.column width="50%"} 

[1 variable qualitative]{.orange .codeL} - [Diagramme en barre]{.codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
plot(esoph$agegp)

```
::: 

[2 variables qualitatives]{.orange .codeL} - [Graphique en mosaic]{.codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%

plot(alcgp ~ agegp, data = esoph)
```

:::

[1 variable quali vs 1 variable quanti]{.orange .codeL} - [Spine plot]{.codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
plot(agegp ~ ncases, data = esoph)
```
:::
:::
:::

[Un tableau de données complet]{.orange .codeL} - [Un seul type de graphique]{.codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
plot(iris)
```
:::


## [Autres fonctions graphiques R-base]{.bigone}

::: {.bigbis}
-   `hist()` : histogramme de distribution 
-   `stripchart()` : diagrammes de dispersion
-   `dotchart()` : diagramme en points de Cleveland
-   `boxplot()` : diagramme en boîte
-   `qqnorm()` : diagramme quantile-quantile théorique normal
-   `qqplot()` : diagramme quantile-quantile empirique
-   `barplot()` : diagramme à barres
-   `pie()` : diagramme en secteurs
-   `mosaicplot()` : diagramme en mosaïque
-   `spineplot()` : diagrammes en épine (entre l'histogramme et le mosaic plot)
-   `curve()` : Représentation d'une expression mathématique
-   `matplot()` : Dispersions de toutes le variables d'un tableau (un graphique)
-   `pairs()` : Matrice de nuage de point pour l'ensemble des variables d'un tableau
-   etc....
:::

::: {.bigone}
:::{.callout-note }
En fonction du type de variable, la fonction `plot()` renvoie vers les fonctions `barplot()`,  `spineplot()`, `stripchart()`, `boxplot()`, `curve()`, `pairs()`...
:::
:::

::: columns

::: {.column width="33%"}

[Histogramme de distribution]{.orange .codeL} 

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
hist(cars$speed)
```
:::

[Diagrammes de dispersion]{.orange .codeL} 

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
stripchart(cars$speed, method = "stack")
```
:::

[Diagrammes en épine]{.orange .codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
spineplot(agegp ~ ncases, data = esoph)
```
:::


:::

::: {.column width="33%"}

[Boîte à moustache]{.orange .codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
boxplot(cars$speed)
```
:::

[Diagramme en points de Cleveland]{.orange .codeL} 

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
dotchart(cars$speed)

```
:::


[Camembert]{.orange .codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
# Create data for the graph.
tab <- data.frame(
          name = c("A", "B", "C"),
          value = c(19,53, 88)
         )

# Plot the chart.
pie(tab$value, tab$name)
```
:::

:::

::: {.column width="33%"}

[Diagramme à barres]{.orange .codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
barplot(table(esoph$agegp))
```
:::



[Expression mathématique]{.orange .codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
curve(expr = x^3)
```
:::

[Nuage de points - toutes les variables]{.orange .codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
pairs(iris)
```
:::

:::

:::

## [Les arguments des fonctions graphiques]{.bigone}

[Une multitude d'arguments permettent de paramétrer la mise en page d'un graphique.]{.bigtwo}

```{r}
x <- seq(-pi, pi, 0.1)
y <- sin(x)
```

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%

plot(y ~ x, 
  type = "o", # type de tracé: points ("p"), lignes ("l"), les deux ("b" ou "o"), ...
  col = "red", # couleur, tapez `colours()` pour la liste complète
  pch = 20, # type de symboles, un chiffre entre 0 et 25, tapez `?points`
  cex = 1.1, # taille des symboles
  lty = 1, # type de lignes, un chiffre entre 1 et 6
  lwd = 1.4, # taille de lignes
  xlim = c(-2.5, 2.5), # limites de l'axe des x
  ylim = c(-1.5, 1.5), # limites de l'axe des y)
  xlab = "La variable x", # titre pour l'axe des x
  ylab = "Le sinus  de x", # titre pour l'axe des y
  main = "La fonction sinus entre -pi et pi" # titre général pour le graphique
) 
```
:::

## [Les fonctions R-base de mise en page]{.bigone}

[Plusieurs fonctions permettent d'ajouter des éléments sur un graphique existant.]{.bigtwo}


::: {.bigbis}
-   `legend()` : légende
-   `title()` : titre
-   `density()` : courbe de densité à noyau
-   `points()` : point
-   `rug()` : représentation *stripchart* le long de l'axe des x
-   `lines()` : segments de droites reliant des points
-   `matlines()` : segments de droites reliant des points (utiliser avec `matplot()`)
-   `abline()` : droites traversant toute la zone graphique
-   `text()` : texte dans la zone graphique
-   `mtext()` : texte dans la marge
-   etc...
:::

::: {.codeXL style="margin-top:30px;"}
```{r eval = TRUE, fig.align='center'}
#| code-fold: TRUE
#| echo: true
#| out.width: 100%

plot(y ~ x, 
  type = "o", # type de tracé: points ("p"), lignes ("l"), les deux ("b" ou "o"), ...
  col = "red", # couleur, tapez `colours()` pour la liste complète
  pch = 20, # type de symboles, un chiffre entre 0 et 25, tapez `?points`
  cex = 1.1, # taille des symboles
  lty = 1, # type de lignes, un chiffre entre 1 et 6
  lwd = 1.4, # taille de lignes
  xlim = c(-2.5, 2.5), # limites de l'axe des x
  ylim = c(-1.5, 1.5), # limites de l'axe des y)
  xlab = "La variable x", # titre pour l'axe des x
  ylab = "Le sinus  de x") # titre pour l'axe des y) 

# Ajout d'un TITRE
title("Titre de mon graphique", 
      cex.main = 1.2,  
      font.main= 4, 
      col.main= "red4")

# Ajout d'une LEGENDE
legend(x = 0.9, # Emplacement de la légende (coin haut gauche)
       y = -1.1, # Emplacement de la légende (coin haut gauche)
       legend = "Fonction sinus entre -pi et pi", 
       bg = "lightgoldenrod",
       col = "red",
       pch = 20,
       cex = 0.7, # Taille de lé lagende
       lty = 1, 
       lwd = 1.4)

# Ajout d'une LIGNE (horizontale)
abline(h = 0, # Coupe l'axe des y à cette valeur 
       lty = 2, # Type de ligne
       lwd = 0.5, # épaisseur
       col = "grey50")

# Ajout d'un POINT
points(x = -0, 
       y = 0, 
       col = "red4", 
       pch = 20,# Type de symbol
       cex = 4)

# Ajout de TEXTE
text("x = 0 = y", # Texte à afficher
     x = 0.4, # Emplacement du texte (centre)
     y = -0.16, # Emplacement du texte (centre)  
     col = "red4")     

# Ajout de TEXTE dans la marge
mtext(text = "Source : données complétement fictives", # Texte à afficher
     side = 4, # Emplacement (1 = bottom, 2 = left, 3 = top...)
     cex = 0.9, # Taille de la police
     col = "grey")  

 
```
:::

## [Gestion de la fenêtre graphique]{.bigone}

[**Trois fonctions permettent de gérer les paramètres de la fenêtre graphique.**]{.bigtwo}

[I. `par()` pour définir ou interroger les paramètres de la fenêtre graphique.]{.bigtwo}

::: {.codeXL style="margin-top:30px;"}   
```{r eval = TRUE, fig.align='center'}
#| code-fold: TRUE
#| echo: true
#| out.width: 100%

par(bg = "royalblue1", # Couleur de fond
    col= "white",      # couleur du graphique
    mfrow = c(2,2),    # Fenêtre découper en deux lignes / deux colonnes (4 graphiques)
    mar = c(5,5,5,5))  # Gestion des marges pour chaque graphique (B,L,T,R)

plot(x = log(1:10), y = 10:1, main = "plot 1")
plot(x = exp(1:10), y = log(1:10), main = "plot 2")
plot(x = sin(1:10), y = 1:10, main = "plot 3")
plot(x = 1:10, y = exp(1:10), main = "plot 4")

```
:::


[II. `layout()` propose moins d’arguments mais permet un meilleur ajustement de la disposition des figures.]{.bigtwo}

::: {.codeXL style="margin-top:30px;"}   
```{r eval = TRUE, fig.align='center'}
#| code-fold: TRUE
#| echo: true
#| out.width: 100%
matrix(c(4, 3, 3, 1, 2, 2, 1, 2, 2), 3, 3)
```
:::

[Avec la matrice ci-dessus, la fenêtre graphique sera paramétrée pour contenir trois graphiques. Le graphique 1 occupera toute la première ligne. le graphique 2 occupera les deux dernières lignes de la première colonne, et le 3e sera situé dans les deux dernières lignes de la dernière colonne.]{.bigbis}

::: {.codeXL style="margin-top:30px;"}   
```{r eval = TRUE, fig.align='center'}
#| code-fold: TRUE
#| echo: true
#| out.width: 100%

# Découpage de la fenêtre graphique
layout(mat = matrix(c(4, 3, 3, 1, 2, 2, 1, 2, 2), 3, 3))

hist(co2, main = "co2")
plot(co2)
boxplot(co2, axes = FALSE)
qqnorm(co2, main = "")

```
:::


[II. `dev.off()` ferme le graphique en cours et réinitialise par défault la fenêtre graphique.]{.bigtwo}

::: {.codeXL style="margin-top:30px;"}   
```{r eval = TRUE, fig.align='center'}
#| code-fold: TRUE
#| echo: true
#| out.width: 100%


par(bg = "royalblue1") 

plot(1,1)

dev.off()

```

```{r eval = TRUE, fig.align='center'}
#| code-fold: TRUE
#| echo: true
#| out.width: 100%

plot(1,1)

```
:::


## [Limites des fonctions graphiques R-base]{.bigone}

\

::: {.bigone}
Si il existe déjà un certains nombre de fonctionnalités pour la représentation graphique en R-base, ce socle commun présente des limites. Ces fonctions sont très simples d'utilisation, mais sont à privilégier dans un contexte d'exploration des données car :

- [**Les types de représentation graphique sont limitées**]{.elementR}
- [**La syntaxe est peu générique**]{.elementR}
- [**Un graphique + les éléments de mise en page ne peuvent pas être stockés dans un seul objet**]{.elementR}
- [**Le rendu graphique restera toujours assez rudimentaire...** ]{.elementR} 

:::

\

::: {.fatxt}

::: {.callout-important}
## Les extensions graphiques
Il existe de nombreux packages qui offrent une palette importante de fonctionnalités pour la production de graphiques spécifiques et élégants, en seulement quelques lignes de code...

:::

:::


# [La révolution `ggplot2`]{.bigtwo}


## [lattice (2001)]{.bigone}

[Le package `lattice` vise à améliorer les graphiques de base de R en fournissant des valeurs par défaut améliorées et une visualisation simplifiée des relations multivariées.]{.bigtwo} 

::: {.codeXL style="margin-top:30px;"}   
```{r eval = TRUE, fig.align='center'}
library(lattice)
attach(mtcars)

# create factors with value labels
gear.f<-factor(gear,levels=c(3,4,5),
  labels=c("3gears","4gears","5gears"))
cyl.f <-factor(cyl,levels=c(4,6,8),
  labels=c("4cyl","6cyl","8cyl"))

# kernel density plots by factor level (alternate layout)
densityplot(~mpg|cyl.f,
   main="Density Plot by Numer of Cylinders",
   xlab="Miles per Gallon",
   layout=c(1,3))


# boxplots for each combination of two factors
bwplot(cyl.f~mpg|gear.f, 
       ylab="Cylinders", xlab="Miles per Gallon",
       main="Mileage by Cylinders and Gears",
       layout=c(1,3))

# 3d scatterplot by factor level
cloud(mpg~wt*qsec|cyl.f,
   main="3D Scatterplot by Cylinders")
```
:::

[L'une de ses principales caractéristiques est la prise en charge de la création de graphiques en treillis, qui permettent d'afficher des variables ou des relations entre variables, conditionnées par une ou plusieurs autres variables.]{.bigtwo} 

::: {.codeXL style="margin-top:30px;"}   
```{r eval = TRUE, fig.align='center'}
# scatterplots for each combination of two factors
xyplot(mpg~wt|cyl.f*gear.f,
   main="Scatterplots by Cylinders and Gears",
   ylab="Miles per Gallon", xlab="Car Weight")
```
:::


::: {.fatxt} 

::: {.callout-note}
Ce package apporte des fonctionnalités supplémentaires aux fonctions graphiques R-base. Cependant, le rendu graphique reste rudimentaire.
:::

:::
  

  
## [ggplot2 (2007 - 2012)]{.bigone}


::: {style="margin-top:20px;"}   
[**le package `ggplot2` [@Rggplot2] est une véritable révolution en matière de représentation graphique, qui dépasse le périmètre de la communauté R**. Ce package :]{.bigtwo}
:::

::: {.bigtwo}

- Repose sur le concept de La [*Grammar of Graphics*]{.elementR} [@wilkinson:1999:TGOG]
- Produit des graphiques très élégants par défault
- Est adapté au développement d'extensions
- Ouvre la possibilité de construire des **représentations graphiques variées et personnalisées**.

:::

::: columns

::: {.column width="30%" .center}   
::: {.center}   

![](images/gglayers.png)

[[**A Layered Grammar of Graphics**](https://www.uvm.edu/~ngotelli/Rscripts/wickham.2009.pdf) [@doi:10.1198/jcgs.2009.07098]]{.small2}

:::   
:::

::: {.column width="70%"}

::: {.center}
```{r eval = TRUE, fig.align='center'}
#| echo: false
#| out.width: 80%

library(packageRank)
tabdownload <- cranDownloads(packages = "ggplot2", from = "2012", to = "2023")
tabdown <- tabdownload$cranlogs.data
maxcumuldown <- max(tabdownload$cranlogs.data$cumulative)

library(ggplot2)
library(ggthemes)
ggplot(data = tabdown, mapping = aes(x = date, y = count)) +
  geom_line() + 
  geom_smooth() + 
  ggtitle("ggplot2 download counts by day") + 
  xlab("") +  ylim(0, 160000) +
  ylab("") + theme_economist() + 
  annotate(geom="text", x=as.Date("2014-06-01"), y=125000, label=paste0("Total = ", maxcumuldown, " !"), color="blue4", size = 5, fontface = "bold") + 
  theme(plot.title = element_text(size=20))


```
:::

:::

:::

![](images/gallery_ggplot2.png)

![](images/overview.png)

![](images/switzerland.png)

## [ggplot2, au delà de R...]{.bigone}

::: {style="margin-top:20px;"}  
[**La syntaxe de la [*grammaire des graphiques*]{.elementR}, implementée dans un premier temps en langage R, a été reprise et adaptée dans plusieurs langages de programmation.**]{.bigone}
:::

\

::: {style="margin-top:20px;"}  
[**La grammaire des graphiques avec `ggplot2` :**]{.bigtwo}
:::

::: columns
:::: {.column width="36%"}
::: {.codeXL style="margin-top:22px;"}
```r
library(ggplot2)

ggplot(data = cars) +
  geom_point(aes(x = Horsepower,
                 y = Miles_per_Gallon,
                 color = Origin))
```

::: {.center .bold}

![](images/ggplot2.png){width=40%}

:::{.moymd}     
[https://ggplot2.tidyverse.org/](https://ggplot2.tidyverse.org/)
:::

:::

:::
::::
:::: {.column width="64%"}
![](images/gg_ggplot2.png)
::::
:::




##  La grammaire des graphiques en Python (`altair`)

\

::: columns  
:::: {.column width="30%"}  
::: {.codeXL style="margin-top:22px;"}  
```python
import altair as alt

alt.Chart(cars).
  mark_circle(size=60).
  encode(x='Horsepower',
         y='Miles_per_Gallon',
         color='Origin')
```
:::

::: {.center .bold}
![](images/altair.png){width=80%}

[https://altair-viz.github.io/](https://altair-viz.github.io/)

:::

::::
:::: {.column width="70%"}
![](images/gg_altair.png)
::::
:::


##  La grammaire des graphiques en JavaScript (`vegalite`)

\

::: columns  
:::: {.column width="40%"}  
::: {.codeXL style="margin-top:22px;"}  
```js
{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "data": {"url": "data/cars.json"},
  "mark": "point",
  "encoding": {
    "x": {"field": "Horsepower",
          "type": "quantitative"},
    "y": {"field": "Miles_per_Gallon",
          "type": "quantitative"},
    "color": {"field": "Origin",
              "type": "nominal"}
  }
}
```
:::

::: {.center .bold}

![](images/vegalite.png){width=40%}

   
[https://vega.github.io/vega-lite/](https://vega.github.io/vega-lite/) 


:::

::::

:::: {.column width="60%"}
![](images/gg_vegalite.svg){width="90%"}
::::
:::



##  La grammaire des graphiques en Observable JS (`Plot`)

\

::: columns  
:::: {.column width="30%"}  
::: {.codeXL style="margin-top:22px;"}  

```js
Plot.plot({
  grid: true,
  color: {
    legend: true
  },
  marks: [
    Plot.dot(cars, {
    x: "Horsepower",
    y: "Miles_per_Gallon",
    fill: "Origin"
    })
  ]
})
```
:::

::: {.center .bold}

![](images/plot.svg){width="90%"}
[https://github.com/observablehq/plot](https://github.com/observablehq/plot)

:::

::::

:::: {.column width="70%"}
![](images/gg_observable.png)
::::

:::



## [Les extensions de `ggplot2`]{.bigone}

[De nombreuses extensions de `ggplot2` ont été développées et offrent de nouvelles fonctionnalités en matière de mise en forme, de types de représentation graphique, d'animation, d'intéractivité, d'objet pris en compte...]{.bigtwo}

::: {.center .bold}

![](images/extension_ggplot.png){width="90%"}

::: {.bigtwo}
[https://exts.ggplot2.tidyverse.org](https://exts.ggplot2.tidyverse.org)
:::

:::



## [`esquisse`, l'extension à connaître]{.bigone}

[`esquisse` est un package français [@esquisse]. C'est l'une des extensions `ggplot2` les plus téléchargées. Il s'agit d'un *addin* (shiny) pour créer des graphiques `ggplot2` de manière interactive, puis récupérer le code R généré automatiquement.]{.bigtwo}

::: columns  
:::: {.column width="30%"}  
::: {.codeXL style="margin-top:22px;"}  

```{r}
#| eval: false
#| echo: true
library(esquisse)

esquisser()
```

:::

::: {.center .bold}

\
\
\

![](images/esquisse_logo.png){width="75%"}

[https://dreamrs.github.io/esquisse/](https://dreamrs.github.io/esquisse/)

:::


::::

:::: {.column width="70%"}  

::: {.center}
![](images/esquisse.gif){width="80%"}
:::
::::

:::

## [`ggplot2`, de la customization avancée...]{.bigone}



::: {.center}

[X-Men Characters, by **Cedric Scherer**]{.bigtwo}

[https://www.cedricscherer.com/top/dataviz/](https://www.cedricscherer.com/top/dataviz/)

![](images/xmen.jpg)
:::

\



::: {.center}

[Best selling Authors, by **Tania Shapiro**]{.bigtwo}

[https://www.tanyashapiro.com/](https://www.tanyashapiro.com/)

![](images/nyt.png)
:::

\



::: {.center}

**Spatio-temporal Wikidata. Exploration de données ouvertes et liées du web 3.0**, par R. Krummeich, H. Pecout & S. Rey-Coyrehourcq

[https://rzine-reviews.github.io/wikidata_sparql_rzine/#content](https://rzine-reviews.github.io/wikidata_sparql_rzine/#content)

![](images/sparql.png)
:::

## [... à l'art graphique numérique]{.bigone}

::: {.center}

[**Thomas Lin Pedersen** (Rstudio)]{.bigtwo} 

[https://www.data-imaginist.com/art](https://www.data-imaginist.com/art)

:::

::: columns
::: {.column width=50%}
![](images/art_1.png)  
![](images/art_2.png)  
![](images/art_3.png)
:::

::: {.column width=50%}
![](images/art_4.png)   
![](images/art_5.png)  
![](images/art_6.png)
<!-- ![](images/art_7.png) -->

:::
:::


## [Palettes de couleurs]{.bigone}

::: columns
::: {.column width="47%"}
:::: {.center .bold}
[De nombreuses palettes de couleurs sont directement disponibles en R-base :]{.bigtwo} 

![`hcl.colors()`](images/swatch-plot-1.svg)
::::
:::

::: {.column width="6%"}
:::

::: {.column width="47%"}

:::: {.center .bold}

[Au cas où, près de 70 (!) packages proposent des palettes de couleurs]{.bigtwo} 

- `paletteer` [@R-paletteer] propose 2587 palettes (compilation)
- `cols4all` [@R-cols4all], une application shiny pour les explorer

![`cols4all::c4a_gui()`](images/cols4all.png)

::::

:::

:::

# [Tour d'horizon des packages de représentation graphique, par thématique]{.bigtwo}


## [Analyse de réseau]{.bigone}

###  package `igraph`

::: columns
::: {.column width="50%"}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
# Chargement jeu de données exemple
library(igraphdata)
data(karate)

# Affichage d'un objet igraph (réseau)
library(igraph)
plot(karate)
```
:::

:::

::: {.column width="50%"}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true

# Mise en page  d
plot(karate, 
     vertex.color = V(karate)$Faction,      # couleur des sommets
     vertex.frame.color = "white",          # couleur des contours des sommets
     vertex.shape = "square",               # forme des sommets
     vertex.size = degree(karate),          # taille des sommets
     vertex.label = NA,                     # étiquettes des sommets
     vertex.label.degree = 0,       # position / au centre du sommet (0 = droite, "pi"= gauche)
     edge.color = "goldenrod3",     # couleur des arêtes
     edge.curved=.1,                # courbure des arêtes (0 = droit)
     # arrow.mode = 3,              # type de flèche 
     # edge.arrow.size = 12,        # taille de la pointe de la flèche
     edge.width = E(karate)$weight,          # largeur des arêtes
     edge.lty = 1,                           # type de trait (1=plein, 2=pointillés, 3=points...)
     margin =  c(0,0,0.2,0),                 # marges
     main = graph_attr(karate, "name"),      # titre principal
     sub = graph_attr(karate, "Author"),     # sous-titre
     layout = layout_(karate, with_lgl()))             # sous-titre                   

```
:::

:::

:::

###  `ggraph` (extension ggplot2)

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true

library(ggraph)
#> Loading required package: ggplot2
library(tidygraph)

library(tidyverse)

# Create graph of highschool friendships
graph <- as_tbl_graph(highschool) %>% 
    mutate(Popularity = centrality_degree(mode = 'in'))

# plot using ggraph
ggraph(graph, layout = 'kk') + 
    geom_edge_fan(aes(alpha = after_stat(index)), show.legend = FALSE) + 
    geom_node_point(aes(size = Popularity)) + 
    facet_edges(~year) + 
    theme_graph(foreground = 'steelblue', fg_text_colour = 'white')
```
:::

###  `networkD3`

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
data <- data.frame(
  from=c("A", "A", "B", "D", "C", "D", "E", "B", "C", "D", "K", "A", "M"),
  to=c("B", "E", "F", "A", "C", "A", "B", "Z", "A", "C", "A", "B", "K")
)

library(networkD3)
simpleNetwork(data , height="100px", width="100px",        
              Source = 1,                 # column number of source
              Target = 2,                 # column number of target
              linkDistance = 10,          # distance between node. Increase this value to have more space between nodes
              charge = -900,              # numeric value indicating either the strength of the node repulsion (negative value) or attraction (positive value)
              fontSize = 14,              # size of the node names
              fontFamily = "serif",       # font og node names
              linkColour = "#666",        # colour of edges, MUST be a common colour for the whole graph
              nodeColour = "#69b3a2",     # colour of nodes, MUST be a common colour for the whole graph
              opacity = 0.9,              # opacity of nodes. 0=transparent. 1=no transparency
              zoom = T                    # Can you zoom on the figure?
              )
```
:::




visNetwork

## [Analyse de séquence]{.bigone}

TraminEr

## Scatterplot3D

```{r}
library(scatterplot3d)
# Custom shapes/colors
data(iris)

shapes = c(16, 17, 18) 
shapes <- shapes[as.numeric(iris$Species)]
colors <- c("#999999", "#E69F00", "#56B4E9")
colors <- colors[as.numeric(iris$Species)]

s3d <- scatterplot3d(iris[,1:3], pch = shapes, color= colors )
legend("bottom", legend = levels(iris$Species),
      col =  c("#999999", "#E69F00", "#56B4E9"), 
      pch = c(16, 17, 18), 
      inset = -0.25, xpd = TRUE, horiz = TRUE)
```


## rgl

## heatmap

superheat ComplexHeatmap

## Textuelle

wordcloud

## Slope graphs

CGPfunctions

## Circular plot

https://jokergoo.github.io/circlize_book/book/

## Survival

Survival plots

## Visualisation spatiale

## Intéractivité (javascript link)

htmlwidgets.org

## leaflet/Mapview

## rbokeh

## rCharts

## highcharter

## Shiny

## Autre (plotly et cie)

Plotly \> ggplot2 \> Plotly.js \> D3.js \> Javascript

echarts4r

robservable

# Un graphique, et après ?

## Export Classique

## notebook

## shiny

# [Ressources utiles]{.bigtwo}

## <img src="images/overview_RGG.png" width="53" style="margin-top:0px;margin-bottom:-10px;margin-right:13px;"/> r-graph-gallery.com


```{=html}
<iframe width="1070" height="540" src="https://r-graph-gallery.com/" title="R_Graph_Gallery"></iframe>
```


::: {.center .bigtwo}
[By **Yan Hotlz**](https://www.yan-holtz.com/)
:::



## <img src="images/favicon.webp" width="43" style="margin-top:0px;margin-bottom:-10px;margin-right:10px;"/> r-charts.com




```{=html}
<iframe width="1070" height="540" src="https://r-charts.com/" title="R_Charts"></iframe>
```


::: {.center .bigtwo}
[By **José Carlos Soage**](https://twitter.com/i/flow/login?redirect_after_login=%2FRCoderWeb%2F)
:::


##  <img src="images/Rzine_logo.png" width="40" style="margin-top:0px;margin-bottom:-10px;margin-right:13px;"/> rzine.fr


```{=html}
<iframe width="1070" height="600" src="https://rzine.fr" title="rzine.fr"></iframe>
```



## <img src="images/ggplot2.png" width="43" style="margin-top:0px;margin-bottom:-10px;margin-right:13px;"/> ggplot2.tidyverse.org

```{=html}
<iframe width="1070" height="600" src="https://ggplot2.tidyverse.org/" title="rzine.fr"></iframe>
```




## 

\

::: {.bigcinq}
**Merci de votre attention**
:::

\
\
\

::: {.center2}

::: {.bigone}  
hugues.pecout@cnrs.fr   
:::

\

::: columns   
::: {.column width="20%"}   

:::

::: {.column width="30%"}   

<img src="images/github.png" width="35" style="margin-top:15px;margin-bottom:-10px;margin-right:7px;"/> [HuguesPecout](https://github.com/HuguesPecout/) 

\

<img src="images/gitlab.png" width="35" style="margin-top:15px;margin-bottom:-10px;margin-right:7px;"/> [hpecout](https://gitlab.huma-num.fr/hpecout) 

:::

::: {.column width="30%"}

<img src="images/twitter.png" width="55" style="margin-top:15px;margin-bottom:-10px;margin-right:12px;"/>[rzine_shs](https://twitter.com/rzine_shs/) 

\

<img src="images/mastodon_icon.png" width="35" style="margin-top:15px;margin-bottom:-10px;margin-right:12px;"/>[rzine@fosstodon.org](https://fosstodon.org/@rzine) 

:::

::: {.column width="20%"}   

:::

:::

\
\
\
\

::: {.bigbis}
**Diaporama** :  [https://HuguesPecout.github.io/SO_MATE_2023/](https://HuguesPecout.github.io/SO_MATE_2023/)    
**Code source** : [https://github.com/HuguesPecout/SO_MATE_2023](https://github.com/HuguesPecout/SO_MATE_2023)   
:::

:::


## Références bibliographiques
