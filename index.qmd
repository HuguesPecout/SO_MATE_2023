---
title: "Visualisation de données avec R"
subtitle: "Tour d'horizon des fonctionnalités de représentation graphique"
img: images/entete.png
# date: 
author: Hugues Pecout (CNRS, UMR Géographie-Cités)
institute: "Journée annuelle SO-MATE 2023, Limoges"
affiliation: <img src="images/cnrs.png" width="60" style="margin-right:320px;"/><img src="images/somate.png" width="260" style="margin-right:320px;"/><img src="images/geocite.jpeg" width="60" />
lang: fr
editor: source
format:
  revealjs: 
    template-partials:
      - title-slide.html
    theme: [dark, styles.scss]
    logo: images/logo_mate_shs_0.png
    footer: "Journée annuelle SO-MATE 2023 - Représentations graphiques avec R"
    scrollable: TRUE
    smaller: TRUE
    overview: TRUE
    chalkboard: FALSE
    transition: fade
    transition-speed: fast
    menu: TRUE
    css: style.css
    pointer:
      pointerSize: 20
      color: 'red4'
revealjs-plugins:
  - pointer
---

# [Outils de représentation de données]{.bigtwo}

## [Graphiques avec Excel]{.bigone}

::: columns
::: {.column width="25%"}

::: {style="font-size:145%;"} 
✅ **Rapide**   
✅ **Facile**    

\

::: {.txt2}

**Fonctionnalités disponibles :**

❌ Graphiques par défault    
❌ Types de graphiques    
❌ Interactivité        

\

**Gestion des données :**

❌ Manipulation des données         
❌ Statistiques             
❌ Données volumineuses      

\

**Reproductibilité :**

❌ Automatisation du pipeline   
❌ Collaboration         
❌ Versioning
:::
:::
:::

::: {.column width="75%"}
::: {style="margin-top:30px;margin-bottom:15px;font-size:160%;"}
**Mais la représentation graphiques avec Excel connaît des limites...**
:::

![](images/excel.png)

::: {.center style="font-size:80%;"}
[https://excelcharts.com/](https://excelcharts.com/)
:::
:::
:::

## [Graphiques avec des outils dédiés]{.bigone}

[Des **fonctionnalités avancées** et des **sorties graphiques très élégantes**, mais des **logiciels payants**.]{style="font-size:130%;margin-top:10px"}

::: {style="margin-top:-10px;"}
[Bon outils si on ne pratique pas R régulièrement, mais **limité notamment en matière de reproductibilité**.]{style="font-size:130%;"}
:::

::: columns
::: {.column width="20%"}
![](images/power-bi_logo.png){width=80% style="margin-top:10px;"} 
![](images/Tableau-Logo.png){width=80% style="margin-top:-15px;"}    
![](images/ClickView-logo-1.png){width=80% style="margin-top:-15px;"} 
![](images/flourish.jpg){width=80% style="margin-top:20px;"}    
![](images/datawrapper.png){width=80% style="margin-top:20px;"}
![](images/Adobe_Illustrator.png){width=45% style="margin-top:20px;"}  
:::

::: {.column width="5%"}

:::

::: {.column width="75%"}

![](images/power-bi.png){width=90%}

:::

:::


# [Graphiques avec R]{.bigtwo}

## [Fonctions graphiques R-base (1995)]{.bigone}

[La version 1.0 de R a été publiée en 2000, mais ce langage est distribué en tant que logiciel Open Source et avec des fonctions graphiques depuis 1995. **Au centre de l'ecosystème graphique du R-base : la fonction** [**`plot()`**](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/plot)]{.bigbis}

::: {.codeXXL style="margin-top:30px;"}
```{r}
#| echo: true
#| out.width: 85%
plot(x = 1, y = 1)
```
:::

## [plot()]{.bigone}

[**Une fonction générique très pratique pour l'exploration, qui s'adapte aux différents types des données.**]{.bigtwo}

::: columns
::: {.column width="50%"}

[1 variable quantitative]{.orange .codeL} - [Nuage de points ordonnés]{.codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
plot(cars$speed)
```
:::

[2 variables quantitatives]{.orange .codeL} - [Nuage de points]{.codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
plot(speed ~ dist, data = cars)
```
:::


[1 variable quanti vs 1 variable quali]{.orange .codeL}  - [Boîte à moustache]{.codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
plot(ncases ~ agegp, data = esoph)
```
:::

:::


::: {.column width="50%"} 

[1 variable qualitative]{.orange .codeL} - [Diagramme en barre]{.codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
plot(esoph$agegp)

```
::: 

[2 variables qualitatives]{.orange .codeL} - [Graphique en mosaic]{.codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%

plot(alcgp ~ agegp, data = esoph)
```

:::

[1 variable quali vs 1 variable quanti]{.orange .codeL} - [Spine plot]{.codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
plot(agegp ~ ncases, data = esoph)
```
:::
:::
:::

[Un tableau de données complet]{.orange .codeL} - [Un seul type de graphique]{.codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
plot(iris)
```
:::


## [Autres fonctions graphiques R-base]{.bigone}

::: {.bigbis}
-   `hist()` : histogramme de distribution 
-   `stripchart()` : diagrammes de dispersion
-   `dotchart()` : diagramme en points de Cleveland
-   `boxplot()` : diagramme en boîte
-   `qqnorm()` : diagramme quantile-quantile théorique normal
-   `qqplot()` : diagramme quantile-quantile empirique
-   `barplot()` : diagramme à barres
-   `pie()` : diagramme en secteurs
-   `mosaicplot()` : diagramme en mosaïque
-   `spineplot()` : diagrammes en épine (entre l'histogramme et le mosaic plot)
-   `curve()` : Représentation d'une expression mathématique
-   `matplot()` : Dispersions de toutes le variables d'un tableau (un graphique)
-   `pairs()` : Matrice de nuage de point pour l'ensemble des variables d'un tableau
-   etc....
:::

::: {.bigone}
:::{.callout-note }
En fonction du type de variable, la fonction `plot()` renvoie vers les fonctions `barplot()`,  `spineplot()`, `stripchart()`, `boxplot()`, `curve()`, `pairs()`...
:::
:::

::: columns

::: {.column width="33%"}

[Histogramme de distribution]{.orange .codeL} 

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
hist(cars$speed)
```
:::

[Diagrammes de dispersion]{.orange .codeL} 

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
stripchart(cars$speed, method = "stack")
```
:::

[Diagrammes en épine]{.orange .codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
spineplot(agegp ~ ncases, data = esoph)
```
:::


:::

::: {.column width="33%"}

[Boîte à moustache]{.orange .codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
boxplot(cars$speed)
```
:::

[Diagramme en points de Cleveland]{.orange .codeL} 

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
dotchart(cars$speed)

```
:::


[Camembert]{.orange .codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
# Create data for the graph.
tab <- data.frame(
          name = c("A", "B", "C"),
          value = c(19,53, 88)
         )

# Plot the chart.
pie(tab$value, tab$name)
```
:::

:::

::: {.column width="33%"}

[Diagramme à barres]{.orange .codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
barplot(table(esoph$agegp))
```
:::



[Expression mathématique]{.orange .codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
curve(expr = x^3)
```
:::

[Nuage de points - toutes les variables]{.orange .codeL}

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%
pairs(iris)
```
:::

:::

:::

## [Les arguments des fonctions graphiques]{.bigone}

[Une multitude d'arguments permettent de paramétrer la mise en page d'un graphique.]{.bigtwo}

```{r}
x <- seq(-pi, pi, 0.1)
y <- sin(x)
```

::: {.codeXL style="margin-top:10px;"}
```{r}
#| echo: true
#| out.width: 100%

plot(y ~ x, 
  type = "o", # type de tracé: points ("p"), lignes ("l"), les deux ("b" ou "o"), ...
  col = "red", # couleur, tapez `colours()` pour la liste complète
  pch = 20, # type de symboles, un chiffre entre 0 et 25, tapez `?points`
  cex = 1.1, # taille des symboles
  lty = 1, # type de lignes, un chiffre entre 1 et 6
  lwd = 1.4, # taille de lignes
  xlim = c(-2.5, 2.5), # limites de l'axe des x
  ylim = c(-1.5, 1.5), # limites de l'axe des y)
  xlab = "La variable x", # titre pour l'axe des x
  ylab = "Le sinus  de x", # titre pour l'axe des y
  main = "La fonction sinus entre -pi et pi" # titre général pour le graphique
) 
```
:::

## [Les fonctions R-base de mise en page]{.bigone}

[Plusieurs fonctions permettent d'ajouter des éléments sur un graphique existant.]{.bigtwo}


::: {.bigbis}
-   `legend()` : légende
-   `title()` : titre
-   `density()` : courbe de densité à noyau
-   `points()` : point
-   `rug()` : représentation *stripchart* le long de l'axe des x
-   `lines()` : segments de droites reliant des points
-   `matlines()` : segments de droites reliant des points (utiliser avec `matplot()`)
-   `abline()` : droites traversant toute la zone graphique
-   `text()` : texte dans la zone graphique
-   `mtext()` : texte dans la marge
-   etc...
:::

::: {.codeXL style="margin-top:30px;"}
```{r eval = TRUE, fig.align='center'}
#| code-fold: TRUE
#| echo: true
#| out.width: 100%

plot(y ~ x, 
  type = "o", # type de tracé: points ("p"), lignes ("l"), les deux ("b" ou "o"), ...
  col = "red", # couleur, tapez `colours()` pour la liste complète
  pch = 20, # type de symboles, un chiffre entre 0 et 25, tapez `?points`
  cex = 1.1, # taille des symboles
  lty = 1, # type de lignes, un chiffre entre 1 et 6
  lwd = 1.4, # taille de lignes
  xlim = c(-2.5, 2.5), # limites de l'axe des x
  ylim = c(-1.5, 1.5), # limites de l'axe des y)
  xlab = "La variable x", # titre pour l'axe des x
  ylab = "Le sinus  de x") # titre pour l'axe des y) 

# Ajout d'un TITRE
title("Titre de mon graphique", 
      cex.main = 1.2,  
      font.main= 4, 
      col.main= "red4")

# Ajout d'une LEGENDE
legend(x = 0.9, # Emplacement de la légende (coin haut gauche)
       y = -1.1, # Emplacement de la légende (coin haut gauche)
       legend = "Fonction sinus entre -pi et pi", 
       bg = "lightgoldenrod",
       col = "red",
       pch = 20,
       cex = 0.7, # Taille de lé lagende
       lty = 1, 
       lwd = 1.4)

# Ajout d'une LIGNE (horizontale)
abline(h = 0, # Coupe l'axe des y à cette valeur 
       lty = 2, # Type de ligne
       lwd = 0.5, # épaisseur
       col = "grey50")

# Ajout d'un POINT
points(x = -0, 
       y = 0, 
       col = "red4", 
       pch = 20,# Type de symbol
       cex = 4)

# Ajout de TEXTE
text("x = 0 = y", # Texte à afficher
     x = 0.4, # Emplacement du texte (centre)
     y = -0.16, # Emplacement du texte (centre)  
     col = "red4")     

# Ajout de TEXTE dans la marge
mtext(text = "Source : données complétement fictives", # Texte à afficher
     side = 4, # Emplacement (1 = bottom, 2 = left, 3 = top...)
     cex = 0.9, # Taille de la police
     col = "grey")  

 
```
:::

## [Gestion de la fenêtre graphique]{.bigone}

[**Deux fonctions permettent de gérer les paramètres de la fenêtre graphique.**]{.bigtwo}

[I. `par()` pour définir ou interroger les paramètres de la fenêtre graphique.]{.bigtwo}

::: {.codeXL style="margin-top:30px;"}   
```{r eval = TRUE, fig.align='center'}
#| code-fold: TRUE
#| echo: true
#| out.width: 100%

par(bg = "royalblue1", # Couleur de fond
    col= "white",      # couleur du graphique
    mfrow = c(2,2),    # Fenêtre découper en deux lignes / deux colonnes (4 graphiques)
    mar = c(5,5,5,5))  # Gestion des marges pour chaque graphique (B,L,T,R)

plot(x = log(1:10), y = 10:1, main = "plot 1")
plot(x = exp(1:10), y = log(1:10), main = "plot 2")
plot(x = sin(1:10), y = 1:10, main = "plot 3")
plot(x = 1:10, y = exp(1:10), main = "plot 4")

```
:::


[II. `layout()` propose moins d’arguments mais permet un meilleur ajustement de la disposition des figures.]{.bigtwo}

::: {.codeXL style="margin-top:30px;"}   
```{r eval = TRUE, fig.align='center'}
#| code-fold: TRUE
#| echo: true
#| out.width: 100%
matrix(c(4, 3, 3, 1, 2, 2, 1, 2, 2), 3, 3)
```
:::

[Avec la matrice ci-dessus, la fenêtre graphique sera paramétrée pour contenir trois graphiques. Le graphique 1 occupera toute la première ligne. le graphique 2 occupera les deux dernières lignes de la première colonne, et le 3e sera situé dans les deux dernières lignes de la dernière colonne.]{.bigbis}

::: {.codeXL style="margin-top:30px;"}   
```{r eval = TRUE, fig.align='center'}
#| code-fold: TRUE
#| echo: true
#| out.width: 100%

# Découpage de la fenêtre graphique
layout(mat = matrix(c(4, 3, 3, 1, 2, 2, 1, 2, 2), 3, 3))

hist(co2, main = "co2")
plot(co2)
boxplot(co2, axes = FALSE)
qqnorm(co2, main = "")

```
:::

## [Limites des fonctions graphiques R-base]{.bigone}

\

::: {.bigtwo}
Si il existe déjà un certains nombre de fonctionnalités pour la représentation graphique en R-base, ce socle commun de fonctions présente tout de même quelques limites. Ces fonctions sont très simples d'utilisation, mais sont à finalement à privilégier dans un contexte d'exploration des données car :

- **Limiter en matière de types de représentations graphique**
- **Propose une syntaxe peu générique**
- **Un graphique + éléments de mise en pag ne peuvent pas être stockés dans un seul objet**
- **Le rendu graphique restera toujours assez rudimentaire...**  

\

Mais pas de panique, il existe tout une gamme de package qui offre une palette importante de fonctionnalités pour la production de graphiques très élégants, en seulement quelque lignes de code... 
:::

# [Tour d'horizon des packages de représentation graphique]{.bigtwo}

## [Lattice (2001)]{.bigone}

[Le package `lattice` vise à améliorer les graphiques de base de R en fournissant des valeurs par défaut améliorées et une visualisation simplifiée des relations multivariées.]{.bigtwo} 

::: {.codeXL style="margin-top:30px;"}   
```{r eval = TRUE, fig.align='center'}
library(lattice)
attach(mtcars)

# create factors with value labels
gear.f<-factor(gear,levels=c(3,4,5),
  labels=c("3gears","4gears","5gears"))
cyl.f <-factor(cyl,levels=c(4,6,8),
  labels=c("4cyl","6cyl","8cyl"))

# kernel density plots by factor level (alternate layout)
densityplot(~mpg|cyl.f,
   main="Density Plot by Numer of Cylinders",
   xlab="Miles per Gallon",
   layout=c(1,3))


# boxplots for each combination of two factors
bwplot(cyl.f~mpg|gear.f, 
       ylab="Cylinders", xlab="Miles per Gallon",
       main="Mileage by Cylinders and Gears",
       layout=c(1,3))

# 3d scatterplot by factor level
cloud(mpg~wt*qsec|cyl.f,
   main="3D Scatterplot by Cylinders")
```
:::

[L'une de ses principales caractéristiques est la prise en charge de la création de graphiques en treillis, qui permettent d'afficher des variables ou des relations entre variables, conditionnées par une ou plusieurs autres variables.]{.bigtwo} 

::: {.codeXL style="margin-top:30px;"}   
```{r eval = TRUE, fig.align='center'}
# scatterplots for each combination of two factors
xyplot(mpg~wt|cyl.f*gear.f,
   main="Scatterplots by Cylinders and Gears",
   ylab="Miles per Gallon", xlab="Car Weight")
```
:::
  
[Ce package apporte des fonctionnalités supplémentaires aux fonctions graphiques R-base. Cependant, le rendu graphique reste rudimentaire.]{.bigtwo} 
  
## [La révolution ggplot2 (2007)]{.bigone}

3 points forts

- Graphique élégants
- Grammar of graphic
- Type de représentation étendue

## ggplot2 extensions

exts.ggplot2.tidyverse.org

## Customization et Art graphique

Cedric Scherer - X-Men Characters Tania Shapiro - Best selling Authors

# Palettes de couleur

# Visualisation thématique

## Analyse de réseau

networkD3

## Analyse de séquence

## Scatterplot3D

## rgl

## heatmap

superheat ComplexHeatmap

## Textuelle

wordcloud

## Slope graphs

CGPfunctions

## Circular plot

https://jokergoo.github.io/circlize_book/book/

## Survival

Survival plots

## Visualisation spatiale

## Intéractivité (javascript link)

htmlwidgets.org

## leaflet

## rbokeh

## rCharts

## highcharter

## Shiny

## Autre (plotly et cie)

Plotly \> ggplot2 \> Plotly.js \> D3.js \> Javascript

echarts4r

robservable

# Export

## Classique

## notebook

## shiny

# Ressource

## R graph galley

## R charts

## Rzine

## ggplot2 official

https://www.data-imaginist.com/screens/
